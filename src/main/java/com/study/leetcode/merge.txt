
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

class ListNode {
	int value;
	ListNode next;
	
	ListNode(int value) {
		this.value = value;
		this.next = null;
	}
}

public class MergeKSortedList {

	public ListNode merge(List<ListNode> lists) {
		if (lists.size() == 0) 
			return null;
		
		PriorityQueue<ListNode> q = new PriorityQueue<ListNode>(lists.size(), new Comparator<ListNode>(){
			
			public int compare(ListNode a, ListNode b) {
				if (a.value < b.value)
					return -1;
				else if (a.value == b.value)
					return 0;
				else 
					return 1;
			}
			
		});
		
		for (ListNode h : lists) {
			if (h != null)
				q.add(h);
		}
		
		ListNode mergeHead = new ListNode(0);
		ListNode p = mergeHead;
		while(!q.isEmpty()) {
			ListNode tmp = q.poll();
			p.next = tmp;
			if (tmp.next != null) {
				q.add(tmp.next);
			}
			p = p.next;
		}
		
		return mergeHead.next;
		
	}
}